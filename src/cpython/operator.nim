## * https://docs.python.org/3.10/library/operator.html
import nimpy

template X(simbol; a):       auto = nimpy.pyImport("operator").simbol(a).to(type(result))
template X(simbol; a, b, c): auto = nimpy.pyImport("operator").simbol(a, b, c).to(type(result))
template X(simbol; a, b): auto =
  when declared result: nimpy.pyImport("operator").simbol(a, b).to(type(result)) else: discard nimpy.pyImport("operator").simbol(a, b)

proc lt*(a, b: auto):         bool  = X lt, a, b
proc eq*(a, b: auto):         bool  = X eq, a, b
proc le*(a, b: auto):         bool  = X le, a, b
proc ne*(a, b: auto):         bool  = X ne, a, b
proc ge*(a, b: auto):         bool  = X ge, a, b
proc gt*(a, b: auto):         bool  = X gt, a, b
proc add*(a, b: int):         int   = X add, a, b
proc add*(a, b: float):       float = X add, a, b
proc floordiv*(a, b: int):    int   = X floordiv, a, b
proc floordiv*(a, b: float):  float = X floordiv, a, b
proc lshift*(a, b: int):      int   = X lshift, a, b
proc lshift*(a, b: float):    float = X lshift, a, b
proc mul*(a, b: int):         int   = X mul, a, b
proc mul*(a, b: float):       float = X mul, a, b
proc matmul*(a, b: int):      int   = X mul, a, b
proc matmul*(a, b: float):    float = X mul, a, b
proc pow*(a, b: int):         int   = X pow, a, b
proc pow*(a, b: float):       float = X pow, a, b
proc rshift*(a, b: int):      int   = X rshift, a, b
proc rshift*(a, b: float):    float = X rshift, a, b
proc sub*(a, b: int):         int   = X sub, a, b
proc sub*(a, b: float):       float = X sub, a, b
proc truediv*(a, b: int):     int   = X truediv, a, b
proc truediv*(a, b: float):   float = X truediv, a, b
proc index*(a: auto):         int   = X index, a
proc truth*(a: auto):         bool  = X truth, a
proc abs*(a: int):            int   = X abs, a
proc abs*(a: float):          float = X abs, a
proc invert*(a: int):         int   = X invert, a
proc invert*(a: float):       float = X invert, a
proc neg*(a: int):            int   = X neg, a
proc neg*(a: float):          float = X neg, a
proc pos*(a: int):            int   = X pos, a
proc pos*(a: float):          float = X pos, a
proc iadd*(a, b: float or int)      = X iadd, a, b
proc iand*(a, b: float or int)      = X iand, a, b
proc iconcat*(a, b: float or int)   = X iconcat, a, b
proc ifloordiv*(a, b: float or int) = X ifloordiv, a, b
proc ilshift*(a, b: float or int)   = X ilshift, a, b
proc imod*(a, b: float or int)      = X imod, a, b
proc imul*(a, b: float or int)      = X imul, a, b
proc imatmul*(a, b: float or int)   = X imatmul, a, b
proc ior*(a, b: float or int)       = X ior, a, b
proc ipow*(a, b: float or int)      = X ipow, a, b
proc irshift*(a, b: float or int)   = X irshift, a, b
proc isub*(a, b: float or int)      = X isub, a, b
proc itruediv*(a, b: float or int)  = X itruediv, a, b
proc ixor*(a, b: float or int)      = X ixor, a, b
proc delitem*(a: seq[int];    b: int)         = X delitem, a, b
proc delitem*(a: seq[char];   b: int)         = X delitem, a, b
proc delitem*(a: seq[bool];   b: int)         = X delitem, a, b
proc delitem*(a: seq[float];  b: int)         = X delitem, a, b
proc delitem*(a: seq[string]; b: int)         = X delitem, a, b
proc indexOf*(a: seq[int];    b: int):    int = X indexOf, a, b
proc indexOf*(a: seq[char];   b: char):   int = X indexOf, a, b
proc indexOf*(a: seq[bool];   b: bool):   int = X indexOf, a, b
proc indexOf*(a: seq[float];  b: float):  int = X indexOf, a, b
proc indexOf*(a: seq[string]; b: string): int = X indexOf, a, b
proc concat*(a, b: seq[int]):     seq[int]    = X concat, a, b
proc concat*(a, b: seq[char]):    seq[char]   = X concat, a, b
proc concat*(a, b: seq[bool]):    seq[bool]   = X concat, a, b
proc concat*(a, b: seq[float]):   seq[float]  = X concat, a, b
proc concat*(a, b: seq[string]):  seq[string] = X concat, a, b
proc concat*(a: seq[int];    b: int):    bool = X concat, a, b
proc concat*(a: seq[char];   b: char):   bool = X concat, a, b
proc concat*(a: seq[bool];   b: bool):   bool = X concat, a, b
proc concat*(a: seq[float];  b: float):  bool = X concat, a, b
proc concat*(a: seq[string]; b: string): bool = X concat, a, b
proc countOf*(a: seq[int];    b: int):    int = X countOf, a, b
proc countOf*(a: seq[char];   b: char):   int = X countOf, a, b
proc countOf*(a: seq[bool];   b: bool):   int = X countOf, a, b
proc countOf*(a: seq[float];  b: float):  int = X countOf, a, b
proc countOf*(a: seq[string]; b: string): int = X countOf, a, b
proc length_hint*(obj: auto; default=0):  int = X length_hint, obj, default
proc setitem*(a: seq[int];    b: int; c: int):    int = X setitem, a, b, c
proc setitem*(a: seq[char];   b: int; c: char):   int = X setitem, a, b, c
proc setitem*(a: seq[bool];   b: int; c: bool):   int = X setitem, a, b, c
proc setitem*(a: seq[float];  b: int; c: float):  int = X setitem, a, b, c
proc setitem*(a: seq[string]; b: int; c: string): int = X setitem, a, b, c
proc call*[T](obj: T; args: auto) = X call, obj, args  # https://docs.python.org/3.12/library/operator.html#operator.call
